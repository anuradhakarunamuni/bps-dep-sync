<%/*<!--
 ~ Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->*/%>
<%
var update = request.getParameter("update");
var headers = {"Authorization":"Basic " + auth};
var start = 0;
var isProcessesDeployed = false;

//list of process definitions belong to the current tenant
// processDefinition name, total process count, completed process count
var processDefinitionList = [];

if (update != null && update === "true") {
    if (option === "processinstancecount" || option === "avgprocessduration" || option === "taskduration") {

        //Process Instance Count
        var start = 0;
        var total = 0;
        var size = 100; //TODO Decide size
        var processNames = null;
        var processBarChart = [];
        do {
            //retrieve first 100 process definitions
            processNames = get(httpUrl + "/bpmn/repository/process-definitions?size=" + size + "&start=" + start, null, headers, "json").data;
            if (log.isDebugEnabled()) {
                log.debug("Retrieve process definitions");
                log.debug("BPS BPMN REST API request: " + httpUrl + "/bpmn/repository/process-definitions?size=" + size + "&start=" + start);
                log.debug("BPS BPMN REST API response: " + stringify(processNames));
            }

            start = processNames.start;
            total = processNames.total;
            size = processNames.size;
            
            for (var i = 0; i < processNames.data.length; i++) {
                var name = processNames.data[i].id;
                var processCount = get(httpUrl + "/bpmn/history/historic-process-instances?processDefinitionId=" + name + "&tenantId=" +
                                                                        application.get('bpsTenantID'), null, headers, "json").data.total;
                if (processCount == 0) {
                    /*need to check whether the process definition belong to the current tenant because process count can be 0 due to 0 process
                     instances or due to process not belong to current tenant. Therefor need to retrrieve deployment information of the process definition*/
                    var deploymentInfo = get(httpUrl + "/bpmn/repository/deployments/" + processNames.data[i].deploymentId, null, headers, "json").data;
                    if (deploymentInfo.tenantId === application.get('bpsTenantID')) {
                        //process definition belong to current(id with bpsTenantID) tenant
                        processBarChart.push([name, processCount]);

                        //add to process definition list of this tenant
                        processDefinitionList.push([name, processCount, null]);
                    }
                } else {
                    //process definition belong to current(id with bpsTenantID) tenant
                    processBarChart.push([name, processCount]);

                    //add to process definition list of this tenant
                    processDefinitionList.push([name, processCount, null]);
                }
            }

            //start page of next batch of process definitions
            start = start + size;

        } while (start < total);

        if (option === "processinstancecount") {    //check whether request for process instance count
            //Filters the 10 processes with the maximum and the minimum process instances
            var pInstanceCount = request.getParameter("id");
            if (pInstanceCount == "min") {

                sortAscending(processBarChart);
                var orderedProcessList = processBarChart.slice(0, 10);
                processBarChart = orderedProcessList;

            } else if (pInstanceCount == "max") {

                sortDescending(processBarChart);
                var orderedProcessList = processBarChart.slice(0, 10);
                processBarChart = orderedProcessList;

            } else if (pInstanceCount == "all") {

                processBarChart = processBarChart;

            }

            if (log.isDebugEnabled()) {
                log.debug("Calculate process instance count");
                log.debug("Process Instance Count Chart data : " + stringify(processBarChart));
            }
        } else if (option === "avgprocessduration") {   //check whether request for process average duration
            //Average time of the completed processes
            var processBarChartAvgTime = [];

            for (var j in processDefinitionList) {
                var totalTime = 0;
                var totalCount = 0;
                var processesList = null;
                start = 0;
                total = 0;
                size = 100; //TODO Decide size
                do {
                    processesList = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&size=" + size + 
                                                            "&start=" + start + "&processDefinitionId="+ processDefinitionList[j][0] + 
                                                            "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" ).data;
                    start = processNames.start;
                    total = processNames.total;
                    size = processNames.size;

                    var count = processesList.size;
                    if (count > 0) {
                        for (var i in processesList.data) {
                            var timeForOne = processesList.data[i].durationInMillis;
                            //TODO check below time calculation is correct or not
                            var timeInMinutes = timeForOne /(1000*60);
                            totalTime = totalTime + timeInMinutes;
                        }
                        totalCount += count;  
                    }

                    //start page of next batch of process instances
                    start = start + size;

                } while (start < total);
                if (totalCount > 0) {
                    var averageTime = totalTime / totalCount;
                    var avgRoundedTime = Math.round(averageTime * 1000) / 1000;
                    processBarChartAvgTime.push([processDefinitionList[j][0], avgRoundedTime]);
                }
            }

            //Filters the processes according to the average time durations i.e. 10 processes that finished within a short and a long time
            var selectedProcess = request.getParameter("id");
            if (selectedProcess == "shortTime") {

                sortAscending(processBarChartAvgTime);
                var sortedAscendingArray = processBarChartAvgTime.slice(0,10);
                processBarChartAvgTime = sortedAscendingArray;

            } else if (selectedProcess =="longTime") {

                sortDescending(processBarChartAvgTime);
                var sortedDescendingArray = processBarChartAvgTime.slice(0,10);
                processBarChartAvgTime = sortedDescendingArray;

            } else if (selectedProcess =="allProcesses") {

                processBarChartAvgTime = processBarChartAvgTime;

            }

            if (log.isDebugEnabled()) {
                log.debug("Calculate average process duration");
                log.debug("Average Time Duration Of Completed Processes Chart data : " + stringify(processBarChartAvgTime));
            }
        } else if (option === "taskduration") {  //check whether request for Task Durations Of Completed Process

            //Average task duration for completed processes
            var avgTimeDataPerProcess = {};

            for (var j in processDefinitionList){

                var processName = processDefinitionList[j][0];
                //retrieve number of process instances of interested process definition
                var insCount = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&size=1&processDefinitionId=" + processName+
                                                            "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" ).data.total;
                start = 0;
                total = 0;
                size = 100; //TODO Decide size
                var taskArray = {};
                var keyList = [];
                var taskInstanceCountArray = [];

                do {
                    //retrieve task instances belong to interested process definition
                    var taskList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=" + size + "&start=" + start + 
                                        "&processDefinitionId=" + processName + "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" );
                    //retrieve number of process instances of interested process definition
                    /*var insCount = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&size=1&processDefinitionId=" + processName+
                                                                "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" ).data.total;*/
                    start = taskList.data.start;
                    total = taskList.data.total;
                    size = taskList.data.size;

                    for(var i in taskList.data.data){

                        //var taskName = taskList.data.data[i].name;
                        var taskDuration = taskList.data.data[i].durationInMillis;
                        var taskKey = taskList.data.data[i].taskDefinitionKey;

                        if (taskArray[taskKey] > 0) {
                            taskArray[taskKey] = taskArray[taskKey] + taskDuration;
                            taskInstanceCountArray[taskKey] = taskInstanceCountArray[taskKey] + 1;
                        } else {
                            taskArray[taskKey] = taskDuration;
                            taskInstanceCountArray[taskKey] = 1;
                            keyList.push([taskKey]);

                        }
                    }

                    //start page of next batch of task instances
                    start = start + size;

                } while (start < total);

                for(var i in keyList) {
                    taskArray[keyList[i]] = taskArray[keyList[i]] / taskInstanceCountArray[keyList[i]];
                }

                if (insCount > 0) {
                    avgTimeDataPerProcess[processName] = taskArray;
                }
            }

            //TODO : This loop does not needed
            for (key in avgTimeDataPerProcess){
                if (JSON.stringify(avgTimeDataPerProcess[key]) === '{}') {
                    delete avgTimeDataPerProcess[key];
                }
            }

            var avgTaskDurationPerProcess = [];
            var x = request.getParameter("id");

            for (subkey in avgTimeDataPerProcess[x]){
                avgTaskDurationPerProcess.push([subkey, avgTimeDataPerProcess[x][subkey]]);
            }

        }

    } else if (option === "uservstaskscompleted" || option === "uservsavgtime") {

        //User Monitoring START
        //var users = [];
        //Task information related to the user [task count, task duration, average time per task]
        var userTaskInfo = {};

        var start = 0;
        var total = 0;
        var size = 100; //TODO Decide size

        do {
            var taskInstancesList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=" + size + "&start=" + start + 
                                                                "&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" );
            start = taskInstancesList.data.start;
            total = taskInstancesList.data.total;
            size = taskInstancesList.data.size;

            for (var i in taskInstancesList.data.data) {
                var assigneeName = taskInstancesList.data.data[i].assignee;

                var taskDuration = (taskInstancesList.data.data[i].durationInMillis) / 1000;

                if (userTaskInfo[assigneeName] == undefined) {
                    userTaskInfo[assigneeName] = [1, taskDuration];
                } else {
                    userTaskInfo[assigneeName][0] += 1;
                    userTaskInfo[assigneeName][1] += taskDuration;
                }
            }

            //start page of next batch of task instances
            start = start + size;

        } while (start < total);

        if (option === "uservstaskscompleted") {    //User vs tasks completed uptodate

            var userVsTaskCount = [];
            for (key in userTaskInfo){
                userVsTaskCount.push([key , userTaskInfo[key][0]]);
            }

        } else if (option === "uservsavgtime") {    //User vs average time taken to complete tasks

            var  userAvgTaskTime = [];
            for (var i in userTaskInfo) {
                //update average time
                userTaskInfo[i][2] = Math.round((userTaskInfo[i][1] / userTaskInfo[i][0]) * 100) / 100;
                userAvgTaskTime.push([i, userTaskInfo[i][2]])
            }

            if (log.isDebugEnabled()) {
                log.debug("User Vs Average Time Taken to Complete Tasks chart data: "+ stringify(userAvgTaskTime));
            }
        }


    } else if (option === "taskvariation" || option === "processvariation" || option === "userperformance") {

        var MONTHS = ["Jan","Feb","March", "April", "May" , "June", "July" ,"Aug" , "Sep" , "Oct" , "Nov" , "Dec"];


        var currentDate = new Date();
        var startDate = null;
        var endDate = null;
        var startDateStr = '';
        var endtDateStr = '';
        var regex = new RegExp(':', 'g');

        if (option === "taskvariation") {   //Task Demand Variation Over Time i.e. tasks started and completed
            var tasksOverMonths = [];
            for (var i = 0; i < 12; i++) {
                startDate = new Date(currentDate.getFullYear(), i, 1);
                endDate = new Date(currentDate.getFullYear(), i + 1, 0, 23, 59, 59, 59);
                //add parameters with special characters
                //replace ':' with %3A
                startDateStr = startDate.toISOString().replace(regex, '%3A');
                endtDateStr = endDate.toISOString().replace(regex, '%3A');
                //Task Instances Completed
                var completedTaskList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=1&taskCompletedAfter="+
                                                                                  startDateStr + "&taskCompletedBefore="+ endtDateStr+
                                                                                  "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" );

                //Task Instances Created
                var createdTaskList = get( httpUrl + "/bpmn/history/historic-task-instances?size=1&taskCreatedAfter="+
                                                                                  startDateStr + "&taskCreatedBefore="+ endtDateStr+
                                                                                  "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" );
                tasksOverMonths.push([MONTHS[i], completedTaskList.data.total, createdTaskList.data.total]);
            }
        } else if (option === "processvariation") { //Process Demand Variation Over Time i.e. processes started and completed
            var processesOverMonths = [];
            for (var i = 0; i < 12; i++) {
                startDate = new Date(currentDate.getFullYear(), i, 1);
                endDate = new Date(currentDate.getFullYear(), i + 1, 0, 23, 59, 59, 59);
                //add parameters with special characters
                //replace ':' with %3A
                startDateStr = startDate.toISOString().replace(regex, '%3A');
                endtDateStr = endDate.toISOString().replace(regex, '%3A');

                //Process Instances Started
                var completedProcessList = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&size=1&finishedAfter="+
                                                                                  startDateStr + "&finishedBefore="+ endtDateStr+
                                                                                  "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" );

                //Process Instances Started
                var createdProcessList = get( httpUrl + "/bpmn/history/historic-process-instances?size=1&startedAfter="+
                                                                                  startDateStr + "&startedBefore="+ endtDateStr+
                                                                                  "&tenantId="+ application.get('bpsTenantID'), null, headers, "json" );
                processesOverMonths.push([MONTHS[i], completedProcessList.data.total, createdProcessList.data.total]);
            }

        } else if (option === "userperformance") { //User Performance of Tasks over time i.e. tasks started and completed by the user

            var selectedUser = request.getParameter("id");

            var userTasksOverMonths = [];
            for (var i = 0; i < 12; i++) {
                startDate = new Date(currentDate.getFullYear(), i, 1);
                endDate = new Date(currentDate.getFullYear(), i + 1, 0, 23, 59, 59, 59);
                //add parameters with special characters
                //replace ':' with %3A
                startDateStr = startDate.toISOString().replace(regex, '%3A');
                endtDateStr = endDate.toISOString().replace(regex, '%3A');

                //Task instances completed by the user
                var completedUserTaskList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=1&taskCompletedAfter="+
                                                                              startDateStr + "&taskCompletedBefore="+ endtDateStr+
                                                                              "&tenantId="+ application.get('bpsTenantID')+
                                                                              "&taskAssignee=" +selectedUser, null, headers, "json" );

                //Task instances started by the user
                var startedUserTaskList = get( httpUrl + "/bpmn/history/historic-task-instances?size=1&taskCreatedAfter="+
                                                                              startDateStr + "&taskCreatedBefore="+ endtDateStr+
                                                                              "&tenantId="+ application.get('bpsTenantID')+
                                                                              "&taskAssignee=" +selectedUser, null, headers, "json" );

                userTasksOverMonths.push([MONTHS[i], completedUserTaskList.data.total, startedUserTaskList.data.total]);
            }
        }

    }




} else {
    //Retrieve process definition list
    var start = 0;
    var total = 0;
    var size = 100;
    var processNames = null;
    do {
        //retrieve first 100 process definitions
        processNames = get(httpUrl + "/bpmn/repository/process-definitions?size=" + size + "&start=" + start, null, headers, "json").data;
        if (log.isDebugEnabled()) {
            log.debug("Retrieve process definitions");
            log.debug("BPS BPMN REST API request: " + httpUrl + "/bpmn/repository/process-definitions?size=" + size + "&start=" + start);
            log.debug("BPS BPMN REST API response: " + stringify(processNames));
        }

        start = processNames.start;
        total = processNames.total;
        size = processNames.size;

        for (var i = 0; i < processNames.data.length; i++) {
            var deploymentInfo = get(httpUrl + "/bpmn/repository/deployments/" + processNames.data[i].deploymentId, null, headers, "json").data;
            if (deploymentInfo.tenantId === application.get('bpsTenantID')) {
                //There is atleast one process deployed in the system (considering tenants)
                isProcessesDeployed = true;
                //add to process definition list of this tenant
                processDefinitionList.push([processNames.data[i].id, null, null]);
            }
        }

        //start page of next batch of process definitions
        start = start + size;

    } while (start < total);

    if (log.isDebugEnabled()) {
        log.debug("Process Definition List: "+ stringify(processDefinitionList));
    }

    //var users = [];
    //Task information related to the user [task count, task duration, average time per task]
    var userTaskInfo = {};
    start = 0;
    total = 0;
    size = 100;
    do {
        var taskInstancesList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=" + size + "&start=" + 
                                                    start + "&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" );

        start = taskInstancesList.data.start;
        total = taskInstancesList.data.total;
        size = taskInstancesList.data.size;

        for (var i in taskInstancesList.data.data) {
            var assigneeName = taskInstancesList.data.data[i].assignee;

            var taskDuration = (taskInstancesList.data.data[i].durationInMillis) / 1000;

            if (userTaskInfo[assigneeName] == undefined) {
                userTaskInfo[assigneeName] = [1, taskDuration];
            } else {
                userTaskInfo[assigneeName][0] += 1;
                userTaskInfo[assigneeName][1] += taskDuration;
            }
        }

        //start page of next batch of task instances
        start = start + size;

    } while (start < total);

    if (log.isDebugEnabled()) {
        log.debug("User Information : "+ stringify(userTaskInfo));
    }

    //Populate Users to Combo Box
    //Used in reportView
    var userArray = [];
    for (var userName in userTaskInfo) {
        userArray.push(userName);
    }
    userArray.sort();
}


//Sorts the processes according to the average time duration in ascending order
  function sortAscending(processBarChartAvgTime) {
    var length = processBarChartAvgTime.length;
    for(var i = 1; i < length; ++i) {
      var temp = processBarChartAvgTime[i][1];
      var tempName = processBarChartAvgTime[i][0];
      var j = i - 1;
      for(; j >= 0 && processBarChartAvgTime[j][1] > temp; --j) {
        processBarChartAvgTime[j+1][1] = processBarChartAvgTime[j][1];
        processBarChartAvgTime[j+1][0] = processBarChartAvgTime[j][0];
      }
      processBarChartAvgTime[j+1][1] = temp;
      processBarChartAvgTime[j+1][0] = tempName;
    }
  }

//Sorts the processes according to the average time duration in descending order
  function sortDescending(processBarChartAvgTime) {
    var length = processBarChartAvgTime.length;
    for(var i = 1; i < length; ++i) {
      var temp = processBarChartAvgTime[i][1];
      var tempName = processBarChartAvgTime[i][0];
      var j = i - 1;
      for(; j >= 0 && processBarChartAvgTime[j][1] < temp; --j) {
        processBarChartAvgTime[j+1][1] = processBarChartAvgTime[j][1];
      }
      processBarChartAvgTime[j+1][1] = temp;
      processBarChartAvgTime[j+1][0] = tempName;
    }
  }


//Set current active veiw as report view. 
//This is used to highlight current view which the user currently viewing in the navigation bar
reportNavActive = 'class="active"';
%>