<%/*<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->*/%>
<%

var headers = {"Authorization":"Basic " + auth};
var isProcessesDeployed = false;
var completedProcesses = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" ).data.total;
var activeProcesses = get( httpUrl + "/bpmn/runtime/process-instances?suspended=false&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" ).data.total;
var suspendProcesses = get( httpUrl + "/bpmn/runtime/process-instances?suspended=true&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" ).data.total;
//No state called failed
var failedProcesses = 0; //get( httpUrl + "/bpmn/runtime/process-instances" ,null, headers, "json" ).data.total
						//- get( httpUrl + "/bpmn/runtime/process-instances" ,null, headers, "json" ).data.total;

var completedTasks = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" ).data.total;
var activeTasks = get( httpUrl + "/bpmn/runtime/tasks?active=true&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" ).data.total;
var suspendTasks = get( httpUrl + "/bpmn/runtime/tasks?active=false&tenantId="+ application.get('bpsTenantID') ,null, headers, "json" ).data.total;
//No state called failed
var failedTasks = 0; //get( httpUrl + "/bpmn/history/historic-task-instances" ,null, headers, "json" ).data.total
						//- get( httpUrl + "/bpmn/runtime/tasks" ,null, headers, "json" ).data.total;
var start = 0;
var total = 0;
var size = 100; //TODO Decide size
var processBarChart = [];
do {

    var processNames = get( httpUrl + "/bpmn/repository/process-definitions?size=" + size + "&start=" + start ,null, headers, "json" ).data;
    if(log.isDebugEnabled()) {
        log.debug("BPS BPMN REST API request: "+ httpUrl + "/bpmn/repository/process-definitions?size=0");
        log.debug("BPS BPMN REST API response: " + stringify(processNames));
    }

    start = processNames.start;
    total = processNames.total;
    size = processNames.size;

    for(var i= 0; i < processNames.data.length; i++){
    	var name = processNames.data[i].id;
        var processCount = get( httpUrl + "/bpmn/history/historic-process-instances?processDefinitionId=" + name +"&tenantId="+
                                                                    application.get('bpsTenantID'),null, headers, "json" ).data.total;
        if (processCount == 0) {
            var deploymentInfo = get( httpUrl + "/bpmn/repository/deployments/"+ processNames.data[i].deploymentId, null, headers, "json" ).data;
            if (deploymentInfo.tenantId === application.get('bpsTenantID')) {
                //There is atleast one process deployed in the system (considering tenants)
                isProcessesDeployed = true;
                //add to process information
                processBarChart.push([
                    name, processCount
                ]);
            }
        } else {
            //There is atleast one process deployed in the system (considering tenants)
            isProcessesDeployed = true;
            processBarChart.push([
                name, processCount
            ]);
        }
    }
    //start page of next batch of process definitions
    start = start + size;

} while (start < total);
if(log.isDebugEnabled()) {
    log.debug("Dashboard process bar chart data : " + stringify(processBarChart));
}
//Set current active view as stats view.
//This is used to highlight current view which the user currently viewing in the navigation bar
dashboardNavActive = 'class="active"';
%>